//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "course")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub pre_course: Option<String>,
    pub credit: Option<i32>,
    pub department_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::PreCourse",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::department::Entity",
        from = "Column::DepartmentId",
        to = "super::department::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Department,
    #[sea_orm(has_many = "super::score::Entity")]
    Score,
}

impl Related<super::department::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Department.def()
    }
}

impl Related<super::score::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Score.def()
    }
}

impl Related<super::student::Entity> for Entity {
    fn to() -> RelationDef {
        super::score::Relation::Student.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::score::Relation::Course.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
